import {
  ActionIcon,
  Avatar,
  BackgroundImage,
  Card,
  Container,
  createStyles,
  Grid,
  Group,
  Stack,
  Text,
  Title,
  UnstyledButton,
} from "@mantine/core";
import { useClipboard } from "@mantine/hooks";
import { IconHeart, IconHeartFilled, IconShare } from "@tabler/icons-react";
import * as dayjs from "dayjs";
import "dayjs/locale/de";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useBaseUrl } from "../helpers/use-base-url";
import type { RouterOutputs } from "../utils/api";
import { api } from "../utils/api";
dayjs.extend(relativeTime);
dayjs.locale("de");

const Page: NextPage = () => {
  const { data: news } = api.news.all.useQuery();

  return (
    <>
      <Head>
        <title>Startseite Â· Commandmc Devserver</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Title order={1}>Aktuelles</Title>

        <Grid mt="sm">
          {news?.map((item) => (
            <Grid.Col span={6} key={item.id}>
              <NewsCard news={item} />
            </Grid.Col>
          ))}
        </Grid>
      </Container>
    </>
  );
};

export default Page;

interface NewsCardProps {
  news: RouterOutputs["news"]["all"][0];
}

const NewsCard = ({ news }: NewsCardProps) => {
  const { data: session } = useSession();
  const { classes } = useStyles();
  const baseUrl = useBaseUrl();
  const path = `/news/${news.id}`;
  const { copy } = useClipboard();
  const { mutateAsync: toggleLikeByIdAsync } = useToggleLikeByIdMutation();

  return (
    <Card shadow="sm" p={0}>
      <Stack>
        <UnstyledButton component={Link} href={path} w="100%">
          <BackgroundImage h="300px" src={news.imageSrc}>
            <Stack
              className={classes.backgroundOverlay}
              justify="end"
              h="100%"
              spacing={0}
              p="md"
              pb="xs"
            >
              <Title order={2} color="white">
                {news.title}
              </Title>
              <Text color="dimmed" size="xs">
                {dayjs.default(news.createdAt).fromNow()}
              </Text>
            </Stack>
          </BackgroundImage>
        </UnstyledButton>
        <Stack p="md" pt={0}>
          <Group position="apart">
            <Group spacing="sm">
              <Avatar
                size="sm"
                src="https://mc-heads.net/avatar/Meierschlumpf/100/nohelm.png"
                radius="xl"
              />
              <Title order={4}>{news.author.name}</Title>
            </Group>
            <Group>
              {session?.user ? (
                <ActionIcon
                  // eslint-disable-next-line @typescript-eslint/no-misused-promises
                  onClick={async () => {
                    await toggleLikeByIdAsync({ id: news.id });
                  }}
                  style={{ color: news.hasLiked ? "#c70000" : undefined }}
                >
                  {news.hasLiked ? (
                    <IconHeartFilled size={20} />
                  ) : (
                    <IconHeart size={20} />
                  )}
                </ActionIcon>
              ) : null}
              <ActionIcon onClick={() => copy(`${baseUrl ?? ""}${path}`)}>
                <IconShare size={20} />
              </ActionIcon>
            </Group>
          </Group>
        </Stack>
      </Stack>
    </Card>
  );
};

const useToggleLikeByIdMutation = () => {
  const utils = api.useContext();

  return api.news.toggleLikeById.useMutation({
    onMutate: ({ id }) => {
      utils.news.all.setData(undefined, (old) => {
        if (!old) return old;
        return old.map((item) => {
          if (item.id === id) {
            return {
              ...item,
              hasLiked: !item.hasLiked,
            };
          }
          return item;
        });
      });
    },
    onError: (err, { id }) => {
      utils.news.all.setData(undefined, (old) => {
        if (!old) return old;
        return old.map((item) => {
          if (item.id === id) {
            return {
              ...item,
              hasLiked: !item.hasLiked,
            };
          }
          return item;
        });
      });
    },
  });
};

const useStyles = createStyles(() => ({
  backgroundOverlay: {
    backgroundImage:
      "linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 100%);",
  },
}));
